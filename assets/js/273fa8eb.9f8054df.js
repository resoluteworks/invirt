"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8815],{2271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(4848),r=n(8453);const s=n.p+"assets/images/quickstart-home-e366d0e1592fbd44e0aff50ae9358703.png",o={sidebar_position:2},a="Quick Start",l={id:"overview/quickstart",title:"Quick Start",description:"Example application",source:"@site/docs/overview/quickstart.md",sourceDirName:"overview",slug:"/overview/quickstart",permalink:"/docs/overview/quickstart",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"overviewSidebar",previous:{title:"Introduction",permalink:"/docs/overview/introduction"},next:{title:"Example applications",permalink:"/docs/overview/examples"}},c={},p=[{value:"Dependencies",id:"dependencies",level:3},{value:"Project structure",id:"project-structure",level:3},{value:"Application",id:"application",level:3},{value:"Wiring explained",id:"wiring-explained",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/resoluteworks/invirt/tree/main/examples/quickstart",children:"Example application"})}),"\n",(0,i.jsx)(t.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsx)(t.p,{children:"Invirt comes as a set of libraries, discussed later in this documentation, and which can be added incrementally\nas you expand your application's design. Most of the functionality, however, is contained\nin the core library which can be added as per Gradle example below."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'implementation(platform("dev.invirt:invirt-bom:${invirtVersion}"))\nimplementation("dev.invirt:invirt-core")\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You will also need to add the http4k libraries which Invirt relies on. Below is the minimum required\nto get started with an Invirt app. Netty is simply used as an example, you can of course choose your\npreferred ",(0,i.jsx)(t.a,{href:"https://www.http4k.org/guide/reference/servers/",children:"http4k server backend"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'implementation(platform("org.http4k:http4k-bom:${http4kVersion}"))\nimplementation("org.http4k:http4k-core")\nimplementation("org.http4k:http4k-server-netty")\nimplementation("org.http4k:http4k-config")\nimplementation("org.http4k:http4k-template-pebble")\n'})}),"\n",(0,i.jsx)(t.h3,{id:"project-structure",children:"Project structure"}),"\n",(0,i.jsxs)(t.p,{children:["The structure of an Invirt project is similar to any other http4k application, with some built-in defaults\nfor template look-ups. For a complete example, please check the ",(0,i.jsx)(t.a,{href:"https://github.com/resoluteworks/invirt/tree/main/examples/quickstart",children:"Quickstart project"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:"\u251c\u2500\u2500 build.gradle.kts\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u251c\u2500\u2500 kotlin\n        \u2502   \u2514\u2500\u2500 examples\n        \u2502       \u2514\u2500\u2500 quickstart\n        \u2502           \u2514\u2500\u2500 Application.kt\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 webapp\n                \u2514\u2500\u2500 views\n                    \u2514\u2500\u2500 index.peb\n"})}),"\n",(0,i.jsx)(t.h3,{id:"application",children:"Application"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-kotlin",children:'class IndexResponse(val currentUsername: String) : ViewResponse("index")\n\nclass Application {\n\n    fun start() {\n        val appHandler = Invirt().then(\n            routes(\n                "/" GET {\n                    IndexResponse(currentUsername = "email@test.com").ok()\n                }\n            )\n        )\n\n        val server = Netty(8080)\n        server.toServer(appHandler).start()\n        log.info { "Server started at http://localhost:${server.port}" }\n    }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The content of the ",(0,i.jsx)(t.code,{children:"index.peb"})," template is as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="utf-8"/>\n    </head>\n\n    <body style="padding: 40px;">\n        <h1>Homepage</h1>\n        <div>Current user is <b>{{ model.currentUsername }}</b></div>\n    </body>\n</html>\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Opening the browser at ",(0,i.jsx)(t.a,{href:"http://localhost:8080",children:"http://localhost:8080"})," will render this template with the ",(0,i.jsx)(t.code,{children:"currentUsername"})," value\nas per screenshot below."]}),"\n",(0,i.jsx)("img",{src:s,width:"400"}),"\n",(0,i.jsx)(t.h3,{id:"wiring-explained",children:"Wiring explained"}),"\n",(0,i.jsxs)(t.p,{children:["In order to wire Invirt in your http4k application, you simply define the ",(0,i.jsx)(t.code,{children:"Invirt()"})," filter before your\napplication's routes. This filter sets a default view lens for your application, and bootstraps other\nframework internals discussed later in this documentation."]}),"\n",(0,i.jsxs)(t.p,{children:["The behaviour of the Invirt filter can be customised using a configuration object discussed in the\n",(0,i.jsx)(t.a,{href:"/docs/framework/configuration",children:"Configuration"})," section."]}),"\n",(0,i.jsxs)(t.p,{children:["We also recommend reading about http4k's ",(0,i.jsx)(t.a,{href:"https://www.http4k.org/guide/howto/use_a_templating_engine/",children:"templating capabilities"}),",\nmost of Invirt is built on top of those."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);