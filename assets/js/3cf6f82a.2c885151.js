"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4172],{9627:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=n(4848),t=n(8453);const o={sidebar_position:1},l="Pebble Views Wiring",a={id:"framework/views-wiring",title:"Pebble Views Wiring",description:"Initialising views",source:"@site/docs/framework/views-wiring.md",sourceDirName:"framework",slug:"/framework/views-wiring",permalink:"/docs/framework/views-wiring",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"frameworkSidebar",next:{title:"Static Assets",permalink:"/docs/framework/static-assets"}},r={},d=[{value:"Initialising views",id:"initialising-views",level:2},{value:"Defining how Pebble templates are loaded",id:"defining-how-pebble-templates-are-loaded",level:4},{value:"Bootstrapping Pebble templates",id:"bootstrapping-pebble-templates",level:4},{value:"Setting a global view lens",id:"setting-a-global-view-lens",level:4},{value:"Defining static assets version",id:"defining-static-assets-version",level:4},{value:"Additional Pebble extensions",id:"additional-pebble-extensions",level:4},{value:"Dynamic hot reload",id:"dynamic-hot-reload",level:2},{value:"ViewResponse",id:"viewresponse",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"pebble-views-wiring",children:"Pebble Views Wiring"}),"\n",(0,s.jsx)(i.h2,{id:"initialising-views",children:"Initialising views"}),"\n",(0,s.jsxs)(i.p,{children:["Invirt uses a custom Pebble extension and a series of other components that must be initialised explicitly via\n",(0,s.jsx)(i.code,{children:"initialiseInvirtViews()"})," at application startup. Below is the function's full signature and the details of the initialisation\nsteps being performed is discussed in following sub-sections."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-kotlin",children:'fun initialiseInvirtViews(\n    hotReload: Boolean = false,\n    staticAssetsVersion: String? = null,\n    classpathLocation: String = "webapp/views",\n    hotReloadDirectory: String = "src/main/resources/webapp/views",\n    pebbleExtensions: List<Extension> = emptyList()\n)\n'})}),"\n",(0,s.jsx)(i.h4,{id:"defining-how-pebble-templates-are-loaded",children:"Defining how Pebble templates are loaded"}),"\n",(0,s.jsxs)(i.p,{children:["This is done via the ",(0,s.jsx)(i.code,{children:"hotReload"}),", ",(0,s.jsx)(i.code,{children:"classpathLocation"})," and ",(0,s.jsx)(i.code,{children:"hotReloadDirectory"})," arguments."]}),"\n",(0,s.jsxs)(i.p,{children:["When ",(0,s.jsx)(i.code,{children:"hotReload"})," is ",(0,s.jsx)(i.code,{children:"true"})," the specified ",(0,s.jsx)(i.code,{children:"hotReloadDirectory"})," is used to look-up templates and any template edits\nare immediately visible (for example via a browser refresh). This is typically useful in a development\nenvironment"]}),"\n",(0,s.jsxs)(i.p,{children:["When ",(0,s.jsx)(i.code,{children:"hotReload"})," is ",(0,s.jsx)(i.code,{children:"false"})," the ",(0,s.jsx)(i.code,{children:"classpathLocation"})," is used with additional caching capabilities\nusing http4k's built-in components (no magic, really). Typically used when deploying\nthe application in production."]}),"\n",(0,s.jsx)(i.h4,{id:"bootstrapping-pebble-templates",children:"Bootstrapping Pebble templates"}),"\n",(0,s.jsxs)(i.p,{children:["Invirt exposes a set of ",(0,s.jsx)(i.a,{href:"/docs/api/invirt-core/pebble/pebble-context-objects",children:"custom context objects"})," and\n",(0,s.jsx)(i.a,{href:"/docs/api/invirt-core/pebble/pebble-functions",children:"utility functions"}),"\nwhich are delivered using a custom implementation of template rendering, wired in this call."]}),"\n",(0,s.jsx)(i.h4,{id:"setting-a-global-view-lens",children:"Setting a global view lens"}),"\n",(0,s.jsx)(i.p,{children:"Http4k requires that view models are rendered using a previously declared (view) lens. Invirt sets this globally\nso it can be reused across the framework and your application."}),"\n",(0,s.jsx)(i.h4,{id:"defining-static-assets-version",children:"Defining static assets version"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"staticAssetsVersion"})," argument is required when you need to version static resources (JS/CSS/etc), which is a\ncommon practice in modern web applications. Asset versioning is discussed in detail ",(0,s.jsx)(i.a,{href:"/docs/framework/static-assets",children:"here"}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"additional-pebble-extensions",children:"Additional Pebble extensions"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"pebbleExtensions"})," argument allows for wiring your custom ",(0,s.jsx)(i.a,{href:"https://pebbletemplates.io/wiki/guide/extending-pebble/",children:"Pebble extensions"}),"\nshould you need to expose custom Pebble capabilities to your template rendering."]}),"\n",(0,s.jsx)(i.h2,{id:"dynamic-hot-reload",children:"Dynamic hot reload"}),"\n",(0,s.jsxs)(i.p,{children:["You can easily configure Invirt to use hot reload locally and caching classpath in production by simply\nusing an environment variable to pass as the ",(0,s.jsx)(i.code,{children:"hotReload"})," value to ",(0,s.jsx)(i.code,{children:"initialiseInvirtViews()"}),". This can keep\nthe code simple and flexible."]}),"\n",(0,s.jsxs)(i.p,{children:["Invirt also provides a built-in to make this wiring even easier using\n",(0,s.jsx)(i.a,{href:"/docs/api/invirt-core/environment#environmentdevelopmentmode",children:"Environment.developmentMode"}),"."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-kotlin",children:"val developmentMode = Environment.ENV.developmentMode\ninitialiseInvirtViews(hotReload = developmentMode)\n"})}),"\n",(0,s.jsx)(i.h2,{id:"viewresponse",children:"ViewResponse"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"ViewResponse"})," implements the ",(0,s.jsx)(i.a,{href:"https://www.http4k.org/api/org.http4k.template/-view-model/",children:"ViewModel"})," interface\nin http4k and allows passing the template name as a constructor argument, in order to avoid having\nto implement ",(0,s.jsx)(i.code,{children:"ViewModel.template()"})," every time."]}),"\n",(0,s.jsxs)(i.p,{children:["To lookup and render the template, the framework will use the settings and components previously bootstrapped\nwith ",(0,s.jsx)(i.code,{children:"initialiseInvirtViews()"}),". Together with a few Invirt utility functions, this allows the handler and\nview model code to be kept relatively simple."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-kotlin",children:'data class ListUsersResponse(\n    val users: List<User>\n): ViewResponse("users/list")\n\nval handler =  routes(\n    "/users/list" GET {\n        ...\n        ListUsersResponse(users).ok()\n    },\n    "/users/create" POST {\n        ...\n        CreateUserResponse(user).status(Status.ACCEPTED)\n    }\n)\n'})})]})}function p(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>a});var s=n(6540);const t={},o=s.createContext(t);function l(e){const i=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(o.Provider,{value:i},e.children)}}}]);